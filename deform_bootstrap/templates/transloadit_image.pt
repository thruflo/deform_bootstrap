<input type="hidden" name="__start__" value="${field.name}:mapping"/>
<div id="${field.oid}-container"
    tal:define="has_image cstruct and cstruct.get('small') or False;
    allow_remove getattr(field.widget, 'allow_remove', False)">
  <c tal:condition="field.widget.should_render_config" tal:omit-tag="">
    <input type="hidden" name="params" value="${field.widget.config_str}" />
    <input type="hidden" name="signature" value="${field.widget.signature}" />
  </c>
  <div class="fileupload fileupload-${has_image and 'exists' or 'new'}"
      data-provides="fileupload">
    <div class="fileupload-new thumbnail ${field.widget.css_class}">
      <img />
    </div>
    <div class="fileupload-preview fileupload-exists thumbnail ${field.widget.thumbnail_class}">
      <img src="${cstruct['small']}" tal:condition="has_image" />
    </div>
    <div>
      <div class="upload-button-container">
        <span class="btn btn-file">
          <span class="fileupload-new" i18n:translate="">Choose an image</span>
          <span class="fileupload-exists" i18n:translate="">Change image</span>
          <input id="${field.oid}" type="file" name="${field.name}"
              tal:attributes="class field.widget.css_class"
          />
        </span>
      </div>
      <div class="upload-button-container" tal:condition="allow_remove">
        <a href="#" class="btn fileupload-exists" data-dismiss="fileupload"
            i18n:translate="">
          Remove image</a>
      </div>
    </div>
  </div>
  <c tal:condition="has_image" tal:omit-tag="">
    <input class="existing_data" type="hidden" name="small"
        value="${cstruct['small']}"
    />
    <input class="existing_data" type="hidden" name="medium"
        value="${cstruct['medium']}"
    />
    <input class="existing_data" type="hidden" name="large"
        value="${cstruct['large']}"
    />
    <input class="existing_data" type="hidden" name="original"
        value="${cstruct['original']}"
    />
    <script language="javascript" type="text/javascript">
      (function ($) {
        deform.addCallback('${field.oid}', function (oid) {
          container = $('#' + oid + '-container');
          file_input = container.find(':file');
          data_inputs = container.find('.existing_data');
          file_input.on('change.fileupload', function () {
            data_inputs.remove();
          });
        });
      })(jQuery);
    </script>
  </c>
</div>
<input type="hidden" name="__end__" value="${field.name}:mapping"/>
